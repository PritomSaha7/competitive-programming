// BST - Binary Search Tree
// Source: https://www.youtube.com/watch?v=gcULXE7ViZw
//         https://gist.github.com/mycodeschool/9465a188248b624afdbf

class Node {
  public:
    int data;
    Node * left, * right;
    Node() {}
    Node(int x) {
      data = x;
      left = right = nullptr;
    }
};

Node * Insert(Node * root, int value) {
  if (root == nullptr) {
    root = new Node(value);
  } else if (value <= root -> data) {
    root -> left = Insert(root -> left, value);
  } else {
    root -> right = Insert(root -> right, value);
  }
  return root;
}

Node * Search(Node * root, int value) {
  if (root == nullptr) {
    return root;
  }
  if (value < root -> data) {
    return Search(root -> left);
  } else if (value > root -> data) {
    return Search(root -> right);
  } else {
    return root;
  }
}

Node * FindMin(Node * root) {
  while(root -> left != nullptr) {
    root = root -> left;
  }
  return root;
}

Node * Delete(Node * root, int value) {
  if (root == nullptr) {
    return root;
  } else if (value < root -> data) {
    root -> left = Delete(root -> left, value);
  } else if (value > root -> data) {
    root -> right = Delete(root -> right, value);
  } else {
    if (root -> left == nullptr && root -> right == nullptr) {
      delete root;
      root = nullptr;
    } else if (root -> left == nullptr) {
      Node * temp = root;
      root = root -> right;
      delete temp;
    } else if (root -> right == nullptr) {
      Node * temp = root;
      root = root -> left;
      delete temp;
    } else {
      Node * temp = FindMin(root -> right);
      root -> data = temp -> data;
      root -> right = Delete(root -> right, temp -> data);
    }
  }
  return root;
}

int main() {
  ios :: sync_with_stdio(false);
  cin.tie(0);
  /*
          5
			   / \
			  3   10
			 / \   \
			1   4   11
 */
  Node * root = nullptr;
  root = Insert(root, 5);
  root = Insert(root, 10);
  root = Insert(root, 3);
  root = Insert(root, 4);
  root = Insert(root, 1);
  root = Insert(root, 11);
  root = Delete(root,5);
}
