// Merge Sort
// Complexity - time: O(n log n)
//            - space: O(n)

void unite(vector<int> & a, int l, int d, int r) {
  vector<int> x{a.begin() + l, a.begin() + d + 1};
  vector<int> y{a.begin() + d + 1, a.begin() + r + 1};
  int i = 0, j = 0, k = l;
  while(i < (int) x.size() and j < (int) y.size()) {
    a[k++] = (x[i] <= y[j]) ? x[i++] : y[j++];
  }
  while(i < (int) x.size()) a[k++] = x[i++];
  while(j < (int) y.size()) a[k++] = y[j++];
}

void mergesort(vector<int> & a, int l, int r) { // l = 0, r = a.size() - 1
  if (l == r) return;
  int mid = (l + r) / 2;
  mergesort(a, l, mid);
  mergesort(a, mid + 1, r);
  unite(a, l, mid, r);
}
