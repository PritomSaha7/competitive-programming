// Segment Tree
// Complexity: build(n log n) + update(log n) + get(log n)
// Source: http://www.shafaetsplanet.com/?p=1557

const int N = 1e5 + 5;

vector<int> arr(N), node(N * 4);

void build(int parent, int left, int right) {
  if (left == right) {
    node[parent] = arr[left];
    return;
  }
  int lc = parent * 2;
  int rc = parent * 2 + 1;
  int mid = (left + right) / 2;
  build(lc, left, mid);
  build(rc, mid + 1, right);
  node[parent] = node[lc] + node[rc];
}

void update(int parent, int left, int right, int i, int newvalue) {
  if (i > right || i < left) return;
  if (left >= i && right <= i) {
    node[parent] = newvalue;
    return;
  }
  int lc = parent * 2;
  int rc = parent * 2 + 1;
  int mid = (left + right) / 2;
  update(lc, left, mid, i, newvalue);
  update(rc, mid + 1, right, i, newvalue);
  node[parent] = node[lc] + node[rc];
}

int get(int parent, int left, int right, int i, int j) {
  if (i > right || j < left) return 0;
  if (left >= i && right <= j) return node[parent];
  int lc = parent * 2;
  int rc = parent * 2 + 1;
  int mid = (left + right) / 2;
  int a = get(lc, left, mid, i, j);
  int b = get(rc, mid + 1, right, i, j);
  return a + b;
}
