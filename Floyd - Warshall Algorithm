->> Floyd - Warshall Algorithm
->> All pair shortest path
->> Complexity - O(n ^ 3)
->> Source: Safayet Blog

const int N = 1e2;
const int inf = 1e9;

vector<int> printpath(int i, int j, int next[][N]) {
    vector<int> path;
    path.push_back(i);
    while(i != j) {
        i = next[i][j];
        path.push_back(i);
    }
    return path;
}

int main() {
    ios :: sync_with_stdio(false); cin.tie(0);
    int n, m; cin >> n >> m;
    int matrix[N][N], next[N][N];
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            i == j ? matrix[i][j] = 0 : matrix[i][j] = inf;
            next[i][j] = j;
        }
    }
    for (int i = 0; i < m; i++) {
        int from, to, weight;
        cin >> from >> to >> weight;
        matrix[from][to] = weight;
    }
    for (int k = 1; k <= n; k++) {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (matrix[i][k] + matrix[k][j] < matrix[i][j]) {
                    matrix[i][j] = matrix[i][k] + matrix[k][j];
                    next[i][j] = next[i][k];
                }
            }
        }
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    printf("Path from 4 to 1 is = ");
    vector<int> path = printpath(4, 1, next);
    for (int i = 0; i < path.size(); i++) {
        printf("%d ", path[i]);
    }
    return 0;
}
