// Dijkstra
// Complexity: O(n log n + m)
// Source: http://www.shafaetsplanet.com/?p=1500

const int N = 1e5 + 5;
const int INF = 1e18;

using Pair = pair<int, int>;

vector<Pair> graph[N];
vector<int> vis(N), p(N), dis(N), path;

void pathway(int x) {
  for (int i = x; i > 0; i = p[i]) {
    path.push_back(i);
  }
}

void dijkstra(int x) {
  dis.assign(N, INF);
  dis[x] = 0;
  priority_queue<Pair, vector<Pair>, greater<Pair> > q;
  q.push({dis[x], x});
  while(!q.empty()) {
    int parent = q.top().second;
    q.pop();
    if (vis[parent]) continue;
    vis[parent] = 1;
    for (auto u : graph[parent]) {
      int child = u.first, cost = u.second;
      if (dis[parent] + cost < dis[child]) {
        dis[child] = dis[parent] + cost;
        p[child] = parent;
        q.push({dis[child], child});
      }
    }
  }
}
