->> dijkstra
->> Complexity: O(v log v + e)
->> Source: Safayet Blog

const int N = 1e5;
const int inf = 1e18;

using pii = pair<int, int>;

vector<pii> graph[N];
vector<int> vis(N), p(N), dis(N);
vector<int> way;

void dijkstra(int x) {
  dis.assign(N, inf);
  dis[x] = 0;
  priority_queue<pii, vector<pii>, greater<pii> > q;
  q.push({dis[x], x});
  while(!q.empty()) {
    int parent = q.top().second;
    q.pop();
    if (vis[parent]) continue;
    vis[parent] = 1;
    for (auto u : graph[parent]) {
      int child = u.first, cost = u.second;
      if (dis[parent] + cost < dis[child]) {
        dis[child] = dis[parent] + cost;
        p[child] = parent;
        q.push({dis[child], child});
      }
    }
  }
}

void path(int x) {
  for (int i = x; i > 0; i = p[i]) {
    way.push_back(i);
  }
}

int main() {
  ios :: sync_with_stdio(false);
  cin.tie(0);
  int n, m; cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int u, v, w; cin >> u >> v >> w;
    graph[u].push_back({v, w});
  }
  dijkstra(1);
}
