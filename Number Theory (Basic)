// Source: https://www.hackerearth.com/practice/math/number-theory/basic-number-theory-1/tutorial/

// Binary Exponentiation
// O(log n)

int binexp(int a, int b, int m) {
  a %= m;
  int ans = 1;
  while(b > 0) {
    if (b & 1) {
      ans = (ans * a) % m;
    }
    a = (a * a) % m;
    b /= 2;
  }
  return ans;
}

// Euclidean Algorithm For GCD
// O(log(max(a, b)))

int gcd(int a, int b) {
  return b ? gcd(b, a % b) : a;
}

// Extended Euclidean Algorithm

int gcd, x, y;

void exteuclid(int a, int b) {
  if (b == 0) {
    gcd = a;
    x = 1;
    y = 0;
  } else {
    exteuclid(b, a % b);
    int temp = x;
    x = y;
    y = temp - (a / b) * y;
  }
}

// Modular Multiplicative Inverse

inv(a) % MD = binexp(a, MD - 2, MD)

MD should be prime.

// Fermat's Little Theorem
// Source: https://en.wikipedia.org/wiki/Fermat%27s_little_theorem
