// Disjoint Set Union
// Source: https://cp-algorithms.com/data_structures/disjoint_set_union.html
// Complexity: log(n)

const int N = 1e5 + 5;

vector<int> parent(N), length(N);

void format(int n) {
  for (int i = 1; i <= n; i++) {
    parent[i] = i;
    length[i] = 1;
  }
}

int root(int x) {
  parent[x] = parent[x] == x ? x : root(parent[x]);
  return parent[x];
}

void unite(int a, int b) {
  a = root(a);
  b = root(b);
  if (a != b) {
    if (length[a] < length[b]) {
      swap(a, b);
    } 
    parent[b] = a;
    length[a] += length[b];
  }
}
