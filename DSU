->> Disjoint Set Union
->> Source: Cp - Algorithm
->> Complexity: log(n)

const int N = 1e5;
int parent[N], length[N];

void init(int x) {
    parent[x] = x, length[x] = 1;
}

int root(int x) {
    return parent[x] = parent[x] == x ? x : root(parent[x]);
}

void family(int a, int b) {
    a = root(a);
    b = root(b);
    if (a != b) {
        if (length[a] < length[b]) swap(a, b);
        parent[b] = a;
        length[a] += length[b];
    }
}
