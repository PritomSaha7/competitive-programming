->> Longest increasing subsequence
->> Complexity - O(n ^ 2) || O(n log n)

int lis(vector<int> const & a) {
  int n = a.size();
  const int inf = 1e15;
  vector<int> d(n + 3, inf);
  d[0] = -inf;
  // complexity = n ^ 2
  for (int i = 0; i < n; i++) {
    for (int j = 1; j <= n; j++) {
      if (d[j - 1] < a[i] && a[i] < d[j]) {
        d[j] = a[i];
      }
    }
  }
  // complexity = n log n
  for (int i = 0; i < n; i++) {
    int j = upper_bound(d.begin(), d.end(), a[i]) - d.begin();
    if (d[j - 1] < a[i] && a[i] < d[j]) {
      d[j] = a[i];
    }
  }
  int ans = 0;
  for (int i = 1; i <= n; i++) {
    if (d[i] < inf) {
      ans = i;
    }
  }
  return ans;
}
