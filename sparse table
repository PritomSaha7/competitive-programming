const int N = 1e5 + 5;

vector<vector<int> > table(N, vector<int> (30));
vector<int> a, logs(N);

void computelogs(int n) {
  logs[1] = 0;
  for (int i = 2; i <= n; i++) {
    logs[i] = logs[i / 2] + 1;
  }
}

void build(int n) {
  for (int i = 0; i <= logs[n]; i++) {
    int d = (1 << i);
    for (int j = 1; j + d - 1 <= n; j++) {
      if (i == 0) {
        table[j][i] = a[j];
      } else {
        table[j][i] = min(table[j][i - 1], table[j + (d / 2)][i - 1]);
      }
    }
  }
}

int get(int l, int r) {
  int p = logs[r - l + 1];
  return min(table[l][p], table[r - (1 << p) + 1][p]);
}


// sparse table
// complexity: computelogs - O(n), build - O(n log n), get - O(1)
// source: http://adilet.org/blog/sparse-table/
// calculate min, max, gcd, lcm 

// practice problem
// https://www.spoj.com/problems/RMQSQ/en/
// https://cses.fi/problemset/task/1647
// https://lightoj.com/problem/array-queries
