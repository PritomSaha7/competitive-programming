// Strongly Connected Components
// Source: http://www.shafaetsplanet.com/?p=2531
// Complexity: O(v + e)
// Note: larger endtime node can never be reachable from smaller endtime node.
//       smaller endtime node can / can not be reachable from larger endtime node.

const int N = 1e5 + 5;

vector<int> graph[N], tgraph[N], components[N], vis(N), use(N);
stack<int> stac;
int total;

void topsort(int x) {
  vis[x] = 1;
  for (auto u : graph[x]) {
    if (vis[u] == 0) {
      topsort(u);
    }
  }
  stac.push(x);
}

void dfs(int x) {
  use[x] = 1;
  components[total].push_back(x);
  for (auto u : tgraph[x]) {
    if (use[u] == 0) {
      dfs(u);
    }
  }
}

void scc(int n) {
  for (int i = 1; i <= n; i++) {
    if (vis[i] == 0) {
      topsort(i);
    }
  }
  while(!stac.empty()) {
    int node = stac.top();
    stac.pop();
    if (use[node] == 0) {
      total += 1;
      dfs(node);
    }
  }
}
