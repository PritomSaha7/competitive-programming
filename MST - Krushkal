->> Minimum Spanning Tree - Krushkal Algorithm
->> Source: Hackerearth
->> Complexity: O(e log v)

const int N = 1e5;

int parent[N], length[N];
pair<int, pair<int, int> > p[N];

int nodes, edges;

void init(int n) {
    for (int i = 1; i <= n; i++) {
        parent[i] = i;
        length[i] = 1;
    }
}

int root(int x) {
    return parent[x] = (parent[x] == x) ? x : root(parent[x]);
}

void family(int a, int b) {
    a = root(a);
    b = root(b);
    if (a != b) {
        if (length[a] < length[b]) {
            swap(a, b);
        }
        parent[b] = a;
        length[a] += length[b];
    }
}

int krushkal() {
    int mincost = 0;
    for (int i = 0; i < edges; i++) {
        int u = p[i].second.first, v = p[i].second.second, w = p[i].first;
        if (root(u) != root(v)) {
            mincost += w;
            family(u, v);
        }
    }
    return mincost;
}

int main() {
    ios :: sync_with_stdio(false);
    cin.tie(0);
    cin >> nodes >> edges;
    init(nodes);
    for (int i = 0; i < edges; i++) {
        int u, v, w; cin >> u >> v >> w;
        p[i] = {w, {u, v}};
    }
    sort(p, p + edges);
    int mincost = krushkal();
}
