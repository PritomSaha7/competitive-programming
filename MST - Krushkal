// Minimum Spanning Tree - Krushkal Algorithm
// Source: https://www.hackerearth.com/practice/algorithms/graphs/minimum-spanning-tree/tutorial/
// Complexity: O(m log n)

const int N = 1e5 + 5;

vector<int> parent(N), length(N);
pair<int, pair<int, int> > p[N];

void format(int n) {
  for (int i = 1; i <= n; i++) {
    parent[i] = i;
    length[i] = 1;
  }
}

int root(int x) {
  parent[x] = parent[x] == x ? x : root(parent[x]);
  return parent[x];
}

void unite(int a, int b) {
  a = root(a);
  b = root(b);
  if (a != b) {
    if (length[a] < length[b]) {
      swap(a, b);
    } 
    parent[b] = a;
    length[a] += length[b];
  }
}

int krushkal(int m) {
  int mincost = 0;
  for (int i = 0; i < m; i++) {
    int u = p[i].second.first, v = p[i].second.second, w = p[i].first;
    if (root(u) != root(v)) {
      mincost += w;
      unite(u, v);
    }
  }
  return mincost;
}

int main() {
  ios :: sync_with_stdio(false);
  cin.tie(0);
  int n, m;
  cin >> n >> m;
  format(n);
  for (int i = 0; i < m; i++) {
    int u, v, w;
    cin >> u >> v >> w;
    p[i] = {w, {u, v}};
  }
  sort(p, p + m);
  int mincost = krushkal(m);
}
